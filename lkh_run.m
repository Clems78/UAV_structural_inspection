% Get the result from the lkh algorythm for solving the tsp
waypoint_name = waypoints;
pareto_front_running = false;
time_limit = 900;

if ~pareto_front_running
    opti_ratio = 0.45;
end

opti_choice = 'distance'; % distance or alt&dist

if strcmp(opti_choice, 'distance')
    % Export the tsp file from the waypoints generated by the algorythm
    tspExportFnc(waypoint_name, 'LKH-2.0.10/wp_opt', true, time_limit);
elseif strcmp(opti_choice, 'alt&dist')
    tspExportWithMatrix(waypoints, 'LKH-2.0.10/wp_opt', 'test', opti_ratio, time_limit);
else
    disp("Eror ! Opti choice is either distance or alt&dist");
end

% Define the path to the LKH executable
lkh_executable = '/home/clem/matlab_irp/LKH-2.0.10/LKH';

% Define the directory where the parameter file is located
param_file_directory = '/home/clem/matlab_irp/LKH-2.0.10';

% Define the full path to the parameter file
parameter_file = fullfile(param_file_directory, 'wp_opt.par');

% Check if the parameter file exists
if ~isfile(parameter_file)
    error('Parameter file does not exist: %s', parameter_file);
end

% Change MATLAB's current working directory to the parameter file directory
original_directory = pwd; % Save the original directory
cd(param_file_directory);

% Construct the command to run LKH with the parameter file
command = sprintf('%s %s', lkh_executable, 'wp_opt.par');

% Run the command in the system shell
[status, cmdout] = system(command);

% Restore the original directory
cd(original_directory);

% Check if the command was successful
if status == 0
    fprintf('LKH solver executed successfully.\n');
    disp(cmdout); % Display the output from the command
else
    error('Failed to execute LKH solver. Command output:\n%s', cmdout);
end

wp_opt_lkh = tspSolReadFnc(waypoint_name, 'LKH-2.0.10/wp_opt_sol.tsp');


path_lenght_LKH = 0;
alt_changes_LKH = 0;

for jj = 1:(size(wp_opt_lkh, 1)-1)
    path_lenght_LKH = path_lenght_LKH + sqrt((wp_opt_lkh(jj, 1) - wp_opt_lkh(jj+1, 1))^2 + (wp_opt_lkh(jj, 2) - wp_opt_lkh(jj+1, 2))^2 + (wp_opt_lkh(jj, 3) - wp_opt_lkh(jj+1, 3))^2);
    alt_changes_LKH = alt_changes_LKH + abs(wp_opt_lkh(jj+1, 3) - wp_opt_lkh(jj, 3));
end

disp(['Path length: ', num2str(path_lenght_LKH/1e3), ' m']);
disp(['Overall altitude changes: ', num2str(round(alt_changes_LKH, 2)/1000), ' m']);


% Battery consumption
E_LKH = energyConsumptionPath(wp_opt_lkh, V); 



